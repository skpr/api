/** Service responsible for coordinating cluster/environment metrics */
syntax = "proto3";

package workflow;

option go_package = "./pb";

service metrics {
  // The total number of HTTP and HTTPS requests for all HTTP methods across all environments.
  rpc ClusterRequests (ClusterRequestsRequest) returns (ClusterRequestsResponse) {}
  // The number of HTTP codes that originate from all load balancers.
  rpc ClusterResponseCodes (ClusterResponseCodesRequest) returns (ClusterResponseCodesResponse) {}
  // The total number of HTTP and HTTPS requests for all HTTP methods for an environment.
  rpc Requests (RequestsRequest) returns (RequestsResponse) {}
  // The number of HTTP codes that originate from an environments load balancer.
  rpc ResponseCodes (ResponseCodesRequest) returns (ResponseCodesResponse) {}
  // The time elapsed after the request leaves the load balancer until a response from the target is received.
  rpc ResponseTimes (ResponseTimesRequest) returns (ResponseTimesResponse) {}
  // The percentage of all cacheable requests for which CDN served the content from its cache.
  rpc CacheRatio (CacheRatioRequest) returns (CacheRatioResponse) {}
  // This error indicates a communication problem between CDN and the origin.
  rpc OriginErrors (OriginErrorsRequest) returns (OriginErrorsResponse) {}
  // The number of requests which were sent to invalidate the CDN.
  rpc InvalidationRequests (InvalidationRequestsRequest) returns (InvalidationRequestsResponse) {}
  // The number of paths which were invalidated by requests.
  rpc InvalidationPaths (InvalidationPathsRequest) returns (InvalidationPathsResponse) {}
  // The amount of resources used by an environment.
  rpc ResourceUsage (ResourceUsageRequest) returns (ResourceUsageResponse) {}
}

/**
 * Input for ClusterRequests.
 */
message ClusterRequestsRequest {}

/**
 * Output for ClusterRequests.
 */
message ClusterRequestsResponse {
  repeated MetricClusterRequests Metrics = 1; // List of metrics.
}

/**
 * Metric which contains total request for a single date for all cluster environments.
 */
message MetricClusterRequests {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Requests = 2; // Requests across all environments.
}

/**
 * Input for ClusterResponseCodes.
 */
message ClusterResponseCodesRequest {}

/**
 * Output for ClusterResponseCodes.
 */
message ClusterResponseCodesResponse {
  repeated MetricClusterResponseCodes Metrics = 1; // List of metrics.
}

/**
 * Metric which contains total response codes for a single date.
 */
message MetricClusterResponseCodes {
  string Date = 1; // Date which the metric dat a is grouped by.
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status
  int64 Server = 2; // Error codes were returned from the server.
  int64 Client = 3; // Client related codes.
  int64 Redirection = 4; // Codes which related to redirects.
  int64 Successful = 5; // Codes which relate to successful responses.
}

/**
 * Input for Requests.
 */
message RequestsRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for Requests.
 */
message RequestsResponse {
  repeated MetricRequests Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains total request for a single date on a single environment.
 */
message MetricRequests {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Requests = 2;
}

/**
 * Input for ResponseCodes.
 */
message ResponseCodesRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for ResponseCodes.
 */
message ResponseCodesResponse {
  repeated MetricResponseCodes Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains total response codes for a single date on a single environment.
 */
message MetricResponseCodes {
  string Date = 1; // Date which the metric dat a is grouped by.
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status
  int64 Server = 2; // Error codes were returned from the server.
  int64 Client = 3; // Client related codes.
  int64 Redirection = 4; // Codes which related to redirects.
  int64 Successful = 5; // Codes which relate to successful responses.
}

/**
 * Input for ResponseTimes.
 */
message ResponseTimesRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for ResponseTimes.
 */
message ResponseTimesResponse {
  repeated MetricResponseTimes Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains total response times for a single date on a single environment.
 */
message MetricResponseTimes {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Average = 2; // Average response time.
  int64 P95 = 3; // 95th percentile.
  int64 P99 = 4; // 99th percentile
}

/**
 * Input for CacheRatio.
 */
message CacheRatioRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for CacheRatio.
 */
message CacheRatioResponse {
  repeated MetricCacheRatio Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains cache ratio for a single date on a single environment.
 */
message MetricCacheRatio {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Hit = 2; // Percentage of cached responses.
  int64 Miss = 3; // Percentage of non cached responses.
}

/**
 * Input for OriginErrors.
 */
message OriginErrorsRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for OriginErrors.
 */
message OriginErrorsResponse {
  repeated MetricOriginErrors Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains origin errors for a single date on a single environment.
 */
message MetricOriginErrors {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Errors = 2; // Number of origin errors.
}

/**
 * Input for InvalidationRequests.
 */
message InvalidationRequestsRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for InvalidationRequests.
 */
message InvalidationRequestsResponse {
  repeated MetricInvalidationRequests Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains invalidation requests for a single date on a single environment.
 */
message MetricInvalidationRequests {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Requests = 2; // Number of invalidation requests.
}

/**
 * Input for InvalidationPaths.
 */
message InvalidationPathsRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for InvalidationPaths.
 */
message InvalidationPathsResponse {
  repeated MetricInvalidationPaths Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains invalidation paths for a single date on a single environment.
 */
message MetricInvalidationPaths {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 Paths = 2; // Number of paths that were invalidated.
}

/**
 * Input for ResourceUsage.
 */
message ResourceUsageRequest {
  string Environment = 1; // Name of the environment.
}

/**
 * Output for ResourceUsage.
 */
message ResourceUsageResponse {
  repeated MetricResourceUsage Metrics = 1; // List of returned metrics.
}

/**
 * Metric which contains resource usage for a single date on a single environment.
 */
message MetricResourceUsage {
  string Date = 1; // Date which the metric dat a is grouped by.
  int64 CPU = 2; // Amount of CPU being utilised.
  int64 Memory = 3; // Amount of memory being utilised.
  int64 Replicas = 4; // Number of replicas.
  int64 ActiveProcesses = 5; // Number of active processes.
  int64 IdleProcesses = 6; // Number of idle processes.
  int64 ListenQueue = 7; // Number of requests that are queued and cannot be processed.
}
