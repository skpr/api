// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: logs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogsClient is the client API for Logs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsClient interface {
	Tail(ctx context.Context, in *LogTailRequest, opts ...grpc.CallOption) (Logs_TailClient, error)
	ListStreams(ctx context.Context, in *LogListStreamsRequest, opts ...grpc.CallOption) (*LogListStreamsResponse, error)
}

type logsClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsClient(cc grpc.ClientConnInterface) LogsClient {
	return &logsClient{cc}
}

func (c *logsClient) Tail(ctx context.Context, in *LogTailRequest, opts ...grpc.CallOption) (Logs_TailClient, error) {
	stream, err := c.cc.NewStream(ctx, &Logs_ServiceDesc.Streams[0], "/workflow.logs/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &logsTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logs_TailClient interface {
	Recv() (*LogTailResponse, error)
	grpc.ClientStream
}

type logsTailClient struct {
	grpc.ClientStream
}

func (x *logsTailClient) Recv() (*LogTailResponse, error) {
	m := new(LogTailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logsClient) ListStreams(ctx context.Context, in *LogListStreamsRequest, opts ...grpc.CallOption) (*LogListStreamsResponse, error) {
	out := new(LogListStreamsResponse)
	err := c.cc.Invoke(ctx, "/workflow.logs/ListStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsServer is the server API for Logs service.
// All implementations must embed UnimplementedLogsServer
// for forward compatibility
type LogsServer interface {
	Tail(*LogTailRequest, Logs_TailServer) error
	ListStreams(context.Context, *LogListStreamsRequest) (*LogListStreamsResponse, error)
	mustEmbedUnimplementedLogsServer()
}

// UnimplementedLogsServer must be embedded to have forward compatible implementations.
type UnimplementedLogsServer struct {
}

func (UnimplementedLogsServer) Tail(*LogTailRequest, Logs_TailServer) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedLogsServer) ListStreams(context.Context, *LogListStreamsRequest) (*LogListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedLogsServer) mustEmbedUnimplementedLogsServer() {}

// UnsafeLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServer will
// result in compilation errors.
type UnsafeLogsServer interface {
	mustEmbedUnimplementedLogsServer()
}

func RegisterLogsServer(s grpc.ServiceRegistrar, srv LogsServer) {
	s.RegisterService(&Logs_ServiceDesc, srv)
}

func _Logs_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogTailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogsServer).Tail(m, &logsTailServer{stream})
}

type Logs_TailServer interface {
	Send(*LogTailResponse) error
	grpc.ServerStream
}

type logsTailServer struct {
	grpc.ServerStream
}

func (x *logsTailServer) Send(m *LogTailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Logs_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.logs/ListStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).ListStreams(ctx, req.(*LogListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Logs_ServiceDesc is the grpc.ServiceDesc for Logs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.logs",
	HandlerType: (*LogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStreams",
			Handler:    _Logs_ListStreams_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tail",
			Handler:       _Logs_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logs.proto",
}
