// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: release.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReleaseClient is the client API for Release service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseClient interface {
	Create(ctx context.Context, in *ReleaseCreateRequest, opts ...grpc.CallOption) (*ReleaseCreateResponse, error)
	Info(ctx context.Context, in *ReleaseInfoRequest, opts ...grpc.CallOption) (*ReleaseInfoResponse, error)
	List(ctx context.Context, in *ReleaseListRequest, opts ...grpc.CallOption) (*ReleaseListResponse, error)
	SignerInfo(ctx context.Context, in *ReleaseSignerInfoRequest, opts ...grpc.CallOption) (*ReleaseSignerInfoResponse, error)
}

type releaseClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseClient(cc grpc.ClientConnInterface) ReleaseClient {
	return &releaseClient{cc}
}

func (c *releaseClient) Create(ctx context.Context, in *ReleaseCreateRequest, opts ...grpc.CallOption) (*ReleaseCreateResponse, error) {
	out := new(ReleaseCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.release/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) Info(ctx context.Context, in *ReleaseInfoRequest, opts ...grpc.CallOption) (*ReleaseInfoResponse, error) {
	out := new(ReleaseInfoResponse)
	err := c.cc.Invoke(ctx, "/workflow.release/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) List(ctx context.Context, in *ReleaseListRequest, opts ...grpc.CallOption) (*ReleaseListResponse, error) {
	out := new(ReleaseListResponse)
	err := c.cc.Invoke(ctx, "/workflow.release/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) SignerInfo(ctx context.Context, in *ReleaseSignerInfoRequest, opts ...grpc.CallOption) (*ReleaseSignerInfoResponse, error) {
	out := new(ReleaseSignerInfoResponse)
	err := c.cc.Invoke(ctx, "/workflow.release/SignerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseServer is the server API for Release service.
// All implementations must embed UnimplementedReleaseServer
// for forward compatibility
type ReleaseServer interface {
	Create(context.Context, *ReleaseCreateRequest) (*ReleaseCreateResponse, error)
	Info(context.Context, *ReleaseInfoRequest) (*ReleaseInfoResponse, error)
	List(context.Context, *ReleaseListRequest) (*ReleaseListResponse, error)
	SignerInfo(context.Context, *ReleaseSignerInfoRequest) (*ReleaseSignerInfoResponse, error)
	mustEmbedUnimplementedReleaseServer()
}

// UnimplementedReleaseServer must be embedded to have forward compatible implementations.
type UnimplementedReleaseServer struct {
}

func (UnimplementedReleaseServer) Create(context.Context, *ReleaseCreateRequest) (*ReleaseCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReleaseServer) Info(context.Context, *ReleaseInfoRequest) (*ReleaseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedReleaseServer) List(context.Context, *ReleaseListRequest) (*ReleaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReleaseServer) SignerInfo(context.Context, *ReleaseSignerInfoRequest) (*ReleaseSignerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerInfo not implemented")
}
func (UnimplementedReleaseServer) mustEmbedUnimplementedReleaseServer() {}

// UnsafeReleaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseServer will
// result in compilation errors.
type UnsafeReleaseServer interface {
	mustEmbedUnimplementedReleaseServer()
}

func RegisterReleaseServer(s grpc.ServiceRegistrar, srv ReleaseServer) {
	s.RegisterService(&Release_ServiceDesc, srv)
}

func _Release_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.release/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).Create(ctx, req.(*ReleaseCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.release/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).Info(ctx, req.(*ReleaseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.release/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).List(ctx, req.(*ReleaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_SignerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSignerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).SignerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.release/SignerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).SignerInfo(ctx, req.(*ReleaseSignerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Release_ServiceDesc is the grpc.ServiceDesc for Release service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Release_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.release",
	HandlerType: (*ReleaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Release_Create_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Release_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Release_List_Handler,
		},
		{
			MethodName: "SignerInfo",
			Handler:    _Release_SignerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "release.proto",
}
