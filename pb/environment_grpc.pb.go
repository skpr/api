// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: environment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvironmentClient is the client API for Environment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentClient interface {
	Delete(ctx context.Context, in *EnvironmentDeleteRequest, opts ...grpc.CallOption) (*EnvironmentDeleteResponse, error)
	Get(ctx context.Context, in *EnvironmentGetRequest, opts ...grpc.CallOption) (*EnvironmentGetResponse, error)
	List(ctx context.Context, in *EnvironmentListRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error)
	Create(ctx context.Context, in *EnvironmentCreateRequest, opts ...grpc.CallOption) (Environment_CreateClient, error)
	Update(ctx context.Context, in *EnvironmentUpdateRequest, opts ...grpc.CallOption) (Environment_UpdateClient, error)
	Validate(ctx context.Context, in *EnvironmentValidateRequest, opts ...grpc.CallOption) (*EnvironmentValidateResponse, error)
}

type environmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentClient(cc grpc.ClientConnInterface) EnvironmentClient {
	return &environmentClient{cc}
}

func (c *environmentClient) Delete(ctx context.Context, in *EnvironmentDeleteRequest, opts ...grpc.CallOption) (*EnvironmentDeleteResponse, error) {
	out := new(EnvironmentDeleteResponse)
	err := c.cc.Invoke(ctx, "/workflow.environment/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) Get(ctx context.Context, in *EnvironmentGetRequest, opts ...grpc.CallOption) (*EnvironmentGetResponse, error) {
	out := new(EnvironmentGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.environment/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) List(ctx context.Context, in *EnvironmentListRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error) {
	out := new(EnvironmentListResponse)
	err := c.cc.Invoke(ctx, "/workflow.environment/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) Create(ctx context.Context, in *EnvironmentCreateRequest, opts ...grpc.CallOption) (Environment_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[0], "/workflow.environment/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentCreateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Environment_CreateClient interface {
	Recv() (*EnvironmentCreateResponse, error)
	grpc.ClientStream
}

type environmentCreateClient struct {
	grpc.ClientStream
}

func (x *environmentCreateClient) Recv() (*EnvironmentCreateResponse, error) {
	m := new(EnvironmentCreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *environmentClient) Update(ctx context.Context, in *EnvironmentUpdateRequest, opts ...grpc.CallOption) (Environment_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[1], "/workflow.environment/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Environment_UpdateClient interface {
	Recv() (*EnvironmentUpdateResponse, error)
	grpc.ClientStream
}

type environmentUpdateClient struct {
	grpc.ClientStream
}

func (x *environmentUpdateClient) Recv() (*EnvironmentUpdateResponse, error) {
	m := new(EnvironmentUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *environmentClient) Validate(ctx context.Context, in *EnvironmentValidateRequest, opts ...grpc.CallOption) (*EnvironmentValidateResponse, error) {
	out := new(EnvironmentValidateResponse)
	err := c.cc.Invoke(ctx, "/workflow.environment/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentServer is the server API for Environment service.
// All implementations must embed UnimplementedEnvironmentServer
// for forward compatibility
type EnvironmentServer interface {
	Delete(context.Context, *EnvironmentDeleteRequest) (*EnvironmentDeleteResponse, error)
	Get(context.Context, *EnvironmentGetRequest) (*EnvironmentGetResponse, error)
	List(context.Context, *EnvironmentListRequest) (*EnvironmentListResponse, error)
	Create(*EnvironmentCreateRequest, Environment_CreateServer) error
	Update(*EnvironmentUpdateRequest, Environment_UpdateServer) error
	Validate(context.Context, *EnvironmentValidateRequest) (*EnvironmentValidateResponse, error)
	mustEmbedUnimplementedEnvironmentServer()
}

// UnimplementedEnvironmentServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentServer struct {
}

func (UnimplementedEnvironmentServer) Delete(context.Context, *EnvironmentDeleteRequest) (*EnvironmentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnvironmentServer) Get(context.Context, *EnvironmentGetRequest) (*EnvironmentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEnvironmentServer) List(context.Context, *EnvironmentListRequest) (*EnvironmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEnvironmentServer) Create(*EnvironmentCreateRequest, Environment_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEnvironmentServer) Update(*EnvironmentUpdateRequest, Environment_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnvironmentServer) Validate(context.Context, *EnvironmentValidateRequest) (*EnvironmentValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedEnvironmentServer) mustEmbedUnimplementedEnvironmentServer() {}

// UnsafeEnvironmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServer will
// result in compilation errors.
type UnsafeEnvironmentServer interface {
	mustEmbedUnimplementedEnvironmentServer()
}

func RegisterEnvironmentServer(s grpc.ServiceRegistrar, srv EnvironmentServer) {
	s.RegisterService(&Environment_ServiceDesc, srv)
}

func _Environment_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.environment/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).Delete(ctx, req.(*EnvironmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.environment/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).Get(ctx, req.(*EnvironmentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.environment/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).List(ctx, req.(*EnvironmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnvironmentCreateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentServer).Create(m, &environmentCreateServer{stream})
}

type Environment_CreateServer interface {
	Send(*EnvironmentCreateResponse) error
	grpc.ServerStream
}

type environmentCreateServer struct {
	grpc.ServerStream
}

func (x *environmentCreateServer) Send(m *EnvironmentCreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Environment_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnvironmentUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentServer).Update(m, &environmentUpdateServer{stream})
}

type Environment_UpdateServer interface {
	Send(*EnvironmentUpdateResponse) error
	grpc.ServerStream
}

type environmentUpdateServer struct {
	grpc.ServerStream
}

func (x *environmentUpdateServer) Send(m *EnvironmentUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Environment_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.environment/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).Validate(ctx, req.(*EnvironmentValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Environment_ServiceDesc is the grpc.ServiceDesc for Environment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Environment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.environment",
	HandlerType: (*EnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Environment_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Environment_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Environment_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Environment_Validate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _Environment_Create_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _Environment_Update_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "environment.proto",
}
