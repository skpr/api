// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: backup.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackupClient is the client API for Backup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupClient interface {
	Create(ctx context.Context, in *BackupCreateRequest, opts ...grpc.CallOption) (*BackupCreateResponse, error)
	Get(ctx context.Context, in *BackupGetRequest, opts ...grpc.CallOption) (*BackupGetResponse, error)
	List(ctx context.Context, in *BackupListRequest, opts ...grpc.CallOption) (*BackupListResponse, error)
}

type backupClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupClient(cc grpc.ClientConnInterface) BackupClient {
	return &backupClient{cc}
}

func (c *backupClient) Create(ctx context.Context, in *BackupCreateRequest, opts ...grpc.CallOption) (*BackupCreateResponse, error) {
	out := new(BackupCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.backup/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Get(ctx context.Context, in *BackupGetRequest, opts ...grpc.CallOption) (*BackupGetResponse, error) {
	out := new(BackupGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.backup/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) List(ctx context.Context, in *BackupListRequest, opts ...grpc.CallOption) (*BackupListResponse, error) {
	out := new(BackupListResponse)
	err := c.cc.Invoke(ctx, "/workflow.backup/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupServer is the server API for Backup service.
// All implementations must embed UnimplementedBackupServer
// for forward compatibility
type BackupServer interface {
	Create(context.Context, *BackupCreateRequest) (*BackupCreateResponse, error)
	Get(context.Context, *BackupGetRequest) (*BackupGetResponse, error)
	List(context.Context, *BackupListRequest) (*BackupListResponse, error)
	mustEmbedUnimplementedBackupServer()
}

// UnimplementedBackupServer must be embedded to have forward compatible implementations.
type UnimplementedBackupServer struct {
}

func (UnimplementedBackupServer) Create(context.Context, *BackupCreateRequest) (*BackupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBackupServer) Get(context.Context, *BackupGetRequest) (*BackupGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBackupServer) List(context.Context, *BackupListRequest) (*BackupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBackupServer) mustEmbedUnimplementedBackupServer() {}

// UnsafeBackupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupServer will
// result in compilation errors.
type UnsafeBackupServer interface {
	mustEmbedUnimplementedBackupServer()
}

func RegisterBackupServer(s grpc.ServiceRegistrar, srv BackupServer) {
	s.RegisterService(&Backup_ServiceDesc, srv)
}

func _Backup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.backup/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Create(ctx, req.(*BackupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.backup/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Get(ctx, req.(*BackupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.backup/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).List(ctx, req.(*BackupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backup_ServiceDesc is the grpc.ServiceDesc for Backup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.backup",
	HandlerType: (*BackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Backup_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Backup_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Backup_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backup.proto",
}
