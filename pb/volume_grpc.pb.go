// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: volume.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VolumeClient is the client API for Volume service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumeClient interface {
	BackupList(ctx context.Context, in *VolumeBackupListRequest, opts ...grpc.CallOption) (*VolumeBackupListResponse, error)
	RestoreList(ctx context.Context, in *VolumeRestoreListRequest, opts ...grpc.CallOption) (*VolumeRestoreListResponse, error)
	BackupCreate(ctx context.Context, in *VolumeBackupCreateRequest, opts ...grpc.CallOption) (*VolumeBackupCreateResponse, error)
	BackupGet(ctx context.Context, in *VolumeBackupGetRequest, opts ...grpc.CallOption) (*VolumeBackupGetResponse, error)
	RestoreCreate(ctx context.Context, in *VolumeRestoreCreateRequest, opts ...grpc.CallOption) (*VolumeRestoreCreateResponse, error)
	RestoreGet(ctx context.Context, in *VolumeRestoreGetRequest, opts ...grpc.CallOption) (*VolumeRestoreGetResponse, error)
}

type volumeClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeClient(cc grpc.ClientConnInterface) VolumeClient {
	return &volumeClient{cc}
}

func (c *volumeClient) BackupList(ctx context.Context, in *VolumeBackupListRequest, opts ...grpc.CallOption) (*VolumeBackupListResponse, error) {
	out := new(VolumeBackupListResponse)
	err := c.cc.Invoke(ctx, "/workflow.volume/BackupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) RestoreList(ctx context.Context, in *VolumeRestoreListRequest, opts ...grpc.CallOption) (*VolumeRestoreListResponse, error) {
	out := new(VolumeRestoreListResponse)
	err := c.cc.Invoke(ctx, "/workflow.volume/RestoreList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) BackupCreate(ctx context.Context, in *VolumeBackupCreateRequest, opts ...grpc.CallOption) (*VolumeBackupCreateResponse, error) {
	out := new(VolumeBackupCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.volume/BackupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) BackupGet(ctx context.Context, in *VolumeBackupGetRequest, opts ...grpc.CallOption) (*VolumeBackupGetResponse, error) {
	out := new(VolumeBackupGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.volume/BackupGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) RestoreCreate(ctx context.Context, in *VolumeRestoreCreateRequest, opts ...grpc.CallOption) (*VolumeRestoreCreateResponse, error) {
	out := new(VolumeRestoreCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.volume/RestoreCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) RestoreGet(ctx context.Context, in *VolumeRestoreGetRequest, opts ...grpc.CallOption) (*VolumeRestoreGetResponse, error) {
	out := new(VolumeRestoreGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.volume/RestoreGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServer is the server API for Volume service.
// All implementations must embed UnimplementedVolumeServer
// for forward compatibility
type VolumeServer interface {
	BackupList(context.Context, *VolumeBackupListRequest) (*VolumeBackupListResponse, error)
	RestoreList(context.Context, *VolumeRestoreListRequest) (*VolumeRestoreListResponse, error)
	BackupCreate(context.Context, *VolumeBackupCreateRequest) (*VolumeBackupCreateResponse, error)
	BackupGet(context.Context, *VolumeBackupGetRequest) (*VolumeBackupGetResponse, error)
	RestoreCreate(context.Context, *VolumeRestoreCreateRequest) (*VolumeRestoreCreateResponse, error)
	RestoreGet(context.Context, *VolumeRestoreGetRequest) (*VolumeRestoreGetResponse, error)
	mustEmbedUnimplementedVolumeServer()
}

// UnimplementedVolumeServer must be embedded to have forward compatible implementations.
type UnimplementedVolumeServer struct {
}

func (UnimplementedVolumeServer) BackupList(context.Context, *VolumeBackupListRequest) (*VolumeBackupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupList not implemented")
}
func (UnimplementedVolumeServer) RestoreList(context.Context, *VolumeRestoreListRequest) (*VolumeRestoreListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreList not implemented")
}
func (UnimplementedVolumeServer) BackupCreate(context.Context, *VolumeBackupCreateRequest) (*VolumeBackupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupCreate not implemented")
}
func (UnimplementedVolumeServer) BackupGet(context.Context, *VolumeBackupGetRequest) (*VolumeBackupGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupGet not implemented")
}
func (UnimplementedVolumeServer) RestoreCreate(context.Context, *VolumeRestoreCreateRequest) (*VolumeRestoreCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCreate not implemented")
}
func (UnimplementedVolumeServer) RestoreGet(context.Context, *VolumeRestoreGetRequest) (*VolumeRestoreGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreGet not implemented")
}
func (UnimplementedVolumeServer) mustEmbedUnimplementedVolumeServer() {}

// UnsafeVolumeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeServer will
// result in compilation errors.
type UnsafeVolumeServer interface {
	mustEmbedUnimplementedVolumeServer()
}

func RegisterVolumeServer(s grpc.ServiceRegistrar, srv VolumeServer) {
	s.RegisterService(&Volume_ServiceDesc, srv)
}

func _Volume_BackupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeBackupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).BackupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.volume/BackupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).BackupList(ctx, req.(*VolumeBackupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_RestoreList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRestoreListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).RestoreList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.volume/RestoreList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).RestoreList(ctx, req.(*VolumeRestoreListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_BackupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeBackupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).BackupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.volume/BackupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).BackupCreate(ctx, req.(*VolumeBackupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_BackupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeBackupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).BackupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.volume/BackupGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).BackupGet(ctx, req.(*VolumeBackupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_RestoreCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRestoreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).RestoreCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.volume/RestoreCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).RestoreCreate(ctx, req.(*VolumeRestoreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_RestoreGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRestoreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).RestoreGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.volume/RestoreGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).RestoreGet(ctx, req.(*VolumeRestoreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Volume_ServiceDesc is the grpc.ServiceDesc for Volume service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Volume_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.volume",
	HandlerType: (*VolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BackupList",
			Handler:    _Volume_BackupList_Handler,
		},
		{
			MethodName: "RestoreList",
			Handler:    _Volume_RestoreList_Handler,
		},
		{
			MethodName: "BackupCreate",
			Handler:    _Volume_BackupCreate_Handler,
		},
		{
			MethodName: "BackupGet",
			Handler:    _Volume_BackupGet_Handler,
		},
		{
			MethodName: "RestoreCreate",
			Handler:    _Volume_RestoreCreate_Handler,
		},
		{
			MethodName: "RestoreGet",
			Handler:    _Volume_RestoreGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "volume.proto",
}
