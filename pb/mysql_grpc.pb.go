// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mysql.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MysqlClient is the client API for Mysql service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MysqlClient interface {
	ImageCreate(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageCreateResponse, error)
	ImageGet(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (*ImageGetResponse, error)
	ImageList(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error)
	ImageGetRepository(ctx context.Context, in *ImageGetRepositoryRequest, opts ...grpc.CallOption) (*ImageGetRepositoryResponse, error)
	BackupList(ctx context.Context, in *MysqlListRequest, opts ...grpc.CallOption) (*MysqlListResponse, error)
	BackupCreate(ctx context.Context, in *MysqlBackupCreateRequest, opts ...grpc.CallOption) (*MysqlBackupCreateResponse, error)
	BackupGet(ctx context.Context, in *MysqlBackupGetRequest, opts ...grpc.CallOption) (*MysqlBackupGetResponse, error)
	RestoreList(ctx context.Context, in *MysqlRestoreListRequest, opts ...grpc.CallOption) (*MysqlRestoreListResponse, error)
	RestoreCreate(ctx context.Context, in *MysqlRestoreCreateRequest, opts ...grpc.CallOption) (*MysqlRestoreCreateResponse, error)
	RestoreGet(ctx context.Context, in *MysqlRestoreGetRequest, opts ...grpc.CallOption) (*MysqlRestoreGetResponse, error)
}

type mysqlClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlClient(cc grpc.ClientConnInterface) MysqlClient {
	return &mysqlClient{cc}
}

func (c *mysqlClient) ImageCreate(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageCreateResponse, error) {
	out := new(ImageCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/ImageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) ImageGet(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (*ImageGetResponse, error) {
	out := new(ImageGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/ImageGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) ImageList(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/ImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) ImageGetRepository(ctx context.Context, in *ImageGetRepositoryRequest, opts ...grpc.CallOption) (*ImageGetRepositoryResponse, error) {
	out := new(ImageGetRepositoryResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/ImageGetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) BackupList(ctx context.Context, in *MysqlListRequest, opts ...grpc.CallOption) (*MysqlListResponse, error) {
	out := new(MysqlListResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/BackupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) BackupCreate(ctx context.Context, in *MysqlBackupCreateRequest, opts ...grpc.CallOption) (*MysqlBackupCreateResponse, error) {
	out := new(MysqlBackupCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/BackupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) BackupGet(ctx context.Context, in *MysqlBackupGetRequest, opts ...grpc.CallOption) (*MysqlBackupGetResponse, error) {
	out := new(MysqlBackupGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/BackupGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) RestoreList(ctx context.Context, in *MysqlRestoreListRequest, opts ...grpc.CallOption) (*MysqlRestoreListResponse, error) {
	out := new(MysqlRestoreListResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/RestoreList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) RestoreCreate(ctx context.Context, in *MysqlRestoreCreateRequest, opts ...grpc.CallOption) (*MysqlRestoreCreateResponse, error) {
	out := new(MysqlRestoreCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/RestoreCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlClient) RestoreGet(ctx context.Context, in *MysqlRestoreGetRequest, opts ...grpc.CallOption) (*MysqlRestoreGetResponse, error) {
	out := new(MysqlRestoreGetResponse)
	err := c.cc.Invoke(ctx, "/workflow.mysql/RestoreGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlServer is the server API for Mysql service.
// All implementations must embed UnimplementedMysqlServer
// for forward compatibility
type MysqlServer interface {
	ImageCreate(context.Context, *ImageCreateRequest) (*ImageCreateResponse, error)
	ImageGet(context.Context, *ImageGetRequest) (*ImageGetResponse, error)
	ImageList(context.Context, *ImageListRequest) (*ImageListResponse, error)
	ImageGetRepository(context.Context, *ImageGetRepositoryRequest) (*ImageGetRepositoryResponse, error)
	BackupList(context.Context, *MysqlListRequest) (*MysqlListResponse, error)
	BackupCreate(context.Context, *MysqlBackupCreateRequest) (*MysqlBackupCreateResponse, error)
	BackupGet(context.Context, *MysqlBackupGetRequest) (*MysqlBackupGetResponse, error)
	RestoreList(context.Context, *MysqlRestoreListRequest) (*MysqlRestoreListResponse, error)
	RestoreCreate(context.Context, *MysqlRestoreCreateRequest) (*MysqlRestoreCreateResponse, error)
	RestoreGet(context.Context, *MysqlRestoreGetRequest) (*MysqlRestoreGetResponse, error)
	mustEmbedUnimplementedMysqlServer()
}

// UnimplementedMysqlServer must be embedded to have forward compatible implementations.
type UnimplementedMysqlServer struct {
}

func (UnimplementedMysqlServer) ImageCreate(context.Context, *ImageCreateRequest) (*ImageCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageCreate not implemented")
}
func (UnimplementedMysqlServer) ImageGet(context.Context, *ImageGetRequest) (*ImageGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageGet not implemented")
}
func (UnimplementedMysqlServer) ImageList(context.Context, *ImageListRequest) (*ImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageList not implemented")
}
func (UnimplementedMysqlServer) ImageGetRepository(context.Context, *ImageGetRepositoryRequest) (*ImageGetRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageGetRepository not implemented")
}
func (UnimplementedMysqlServer) BackupList(context.Context, *MysqlListRequest) (*MysqlListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupList not implemented")
}
func (UnimplementedMysqlServer) BackupCreate(context.Context, *MysqlBackupCreateRequest) (*MysqlBackupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupCreate not implemented")
}
func (UnimplementedMysqlServer) BackupGet(context.Context, *MysqlBackupGetRequest) (*MysqlBackupGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupGet not implemented")
}
func (UnimplementedMysqlServer) RestoreList(context.Context, *MysqlRestoreListRequest) (*MysqlRestoreListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreList not implemented")
}
func (UnimplementedMysqlServer) RestoreCreate(context.Context, *MysqlRestoreCreateRequest) (*MysqlRestoreCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCreate not implemented")
}
func (UnimplementedMysqlServer) RestoreGet(context.Context, *MysqlRestoreGetRequest) (*MysqlRestoreGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreGet not implemented")
}
func (UnimplementedMysqlServer) mustEmbedUnimplementedMysqlServer() {}

// UnsafeMysqlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MysqlServer will
// result in compilation errors.
type UnsafeMysqlServer interface {
	mustEmbedUnimplementedMysqlServer()
}

func RegisterMysqlServer(s grpc.ServiceRegistrar, srv MysqlServer) {
	s.RegisterService(&Mysql_ServiceDesc, srv)
}

func _Mysql_ImageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).ImageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/ImageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).ImageCreate(ctx, req.(*ImageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_ImageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).ImageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/ImageGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).ImageGet(ctx, req.(*ImageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_ImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).ImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/ImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).ImageList(ctx, req.(*ImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_ImageGetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).ImageGetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/ImageGetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).ImageGetRepository(ctx, req.(*ImageGetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_BackupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).BackupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/BackupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).BackupList(ctx, req.(*MysqlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_BackupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlBackupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).BackupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/BackupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).BackupCreate(ctx, req.(*MysqlBackupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_BackupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlBackupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).BackupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/BackupGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).BackupGet(ctx, req.(*MysqlBackupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_RestoreList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlRestoreListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).RestoreList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/RestoreList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).RestoreList(ctx, req.(*MysqlRestoreListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_RestoreCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlRestoreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).RestoreCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/RestoreCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).RestoreCreate(ctx, req.(*MysqlRestoreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mysql_RestoreGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlRestoreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlServer).RestoreGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.mysql/RestoreGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlServer).RestoreGet(ctx, req.(*MysqlRestoreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mysql_ServiceDesc is the grpc.ServiceDesc for Mysql service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mysql_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.mysql",
	HandlerType: (*MysqlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageCreate",
			Handler:    _Mysql_ImageCreate_Handler,
		},
		{
			MethodName: "ImageGet",
			Handler:    _Mysql_ImageGet_Handler,
		},
		{
			MethodName: "ImageList",
			Handler:    _Mysql_ImageList_Handler,
		},
		{
			MethodName: "ImageGetRepository",
			Handler:    _Mysql_ImageGetRepository_Handler,
		},
		{
			MethodName: "BackupList",
			Handler:    _Mysql_BackupList_Handler,
		},
		{
			MethodName: "BackupCreate",
			Handler:    _Mysql_BackupCreate_Handler,
		},
		{
			MethodName: "BackupGet",
			Handler:    _Mysql_BackupGet_Handler,
		},
		{
			MethodName: "RestoreList",
			Handler:    _Mysql_RestoreList_Handler,
		},
		{
			MethodName: "RestoreCreate",
			Handler:    _Mysql_RestoreCreate_Handler,
		},
		{
			MethodName: "RestoreGet",
			Handler:    _Mysql_RestoreGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysql.proto",
}
