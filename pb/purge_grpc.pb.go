// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: purge.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PurgeClient is the client API for Purge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurgeClient interface {
	Create(ctx context.Context, in *PurgeCreateRequest, opts ...grpc.CallOption) (*PurgeCreateResponse, error)
	List(ctx context.Context, in *PurgeListRequest, opts ...grpc.CallOption) (*PurgeListResponse, error)
}

type purgeClient struct {
	cc grpc.ClientConnInterface
}

func NewPurgeClient(cc grpc.ClientConnInterface) PurgeClient {
	return &purgeClient{cc}
}

func (c *purgeClient) Create(ctx context.Context, in *PurgeCreateRequest, opts ...grpc.CallOption) (*PurgeCreateResponse, error) {
	out := new(PurgeCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.purge/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purgeClient) List(ctx context.Context, in *PurgeListRequest, opts ...grpc.CallOption) (*PurgeListResponse, error) {
	out := new(PurgeListResponse)
	err := c.cc.Invoke(ctx, "/workflow.purge/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurgeServer is the server API for Purge service.
// All implementations must embed UnimplementedPurgeServer
// for forward compatibility
type PurgeServer interface {
	Create(context.Context, *PurgeCreateRequest) (*PurgeCreateResponse, error)
	List(context.Context, *PurgeListRequest) (*PurgeListResponse, error)
	mustEmbedUnimplementedPurgeServer()
}

// UnimplementedPurgeServer must be embedded to have forward compatible implementations.
type UnimplementedPurgeServer struct {
}

func (UnimplementedPurgeServer) Create(context.Context, *PurgeCreateRequest) (*PurgeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPurgeServer) List(context.Context, *PurgeListRequest) (*PurgeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPurgeServer) mustEmbedUnimplementedPurgeServer() {}

// UnsafePurgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurgeServer will
// result in compilation errors.
type UnsafePurgeServer interface {
	mustEmbedUnimplementedPurgeServer()
}

func RegisterPurgeServer(s grpc.ServiceRegistrar, srv PurgeServer) {
	s.RegisterService(&Purge_ServiceDesc, srv)
}

func _Purge_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurgeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.purge/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurgeServer).Create(ctx, req.(*PurgeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purge_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurgeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.purge/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurgeServer).List(ctx, req.(*PurgeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Purge_ServiceDesc is the grpc.ServiceDesc for Purge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Purge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.purge",
	HandlerType: (*PurgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Purge_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Purge_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purge.proto",
}
